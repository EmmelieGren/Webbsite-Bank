
# @app.route("/")
# def startpage():
#     return render_template("index.html",activePage="startPage" )



<table class="table">
<thead>
    <th>Id</th>
    <th>Date</th>
    <th>Operation</th>
    <th>Amount</th>
    <th>Type</th>
    <th>NewBalance</th>
</thead>
<tbody>
    {%  for t in transaktioner  %}
    <tr>
        <td>{{ t.Id }}</td> 
        <td>{{ t.Date }}</td>
        <td>{{ t.Operation }}</td>
        <td>{{ t.Amount }}</td>
        <td>{{ t.Type }}</td> 
        <td>{{ t.NewBalance}}</td>
    </tr>
    {%  endfor  %}
</tbody>
</table>



befintligtSaldo = allaBefintligaKonton[kontoNummer] 

def insättning(befintligtSaldo):
    belopp = int(input("Ange belopp du vill sätta in: ")) 
    befintligtSaldo = befintligtSaldo + belopp
    allaBefintligaKonton[kontoNummer] = befintligtSaldo
    print("Insättning gjord!")
    cprint(f"Ditt nuvarande saldo är: {befintligtSaldo}", "grey", "on_white")
    print("")

def uttag(befintligtSaldo):
    belopp = int(input("Ange belopp du vill ta ut från konto : "))
                    
    if belopp > befintligtSaldo:
        print(f"För stort uttag, du har ett saldo på: {befintligtSaldo}") 
                    
    elif belopp < befintligtSaldo:
        befintligtSaldo = befintligtSaldo - belopp
        allaBefintligaKonton[kontoNummer] = befintligtSaldo
        print(f"Uttag gjort!") 
        cprint(f"Ditt nuvarande saldo är: {befintligtSaldo}", "grey", "on_white")
        print("")def uttag(befintligtSaldo):
    belopp = int(input("Ange belopp du vill ta ut från konto : "))
                    
    if belopp > befintligtSaldo:
        print(f"För stort uttag, du har ett saldo på: {befintligtSaldo}") 
                    
    elif belopp < befintligtSaldo:
        befintligtSaldo = befintligtSaldo - belopp
        allaBefintligaKonton[kontoNummer] = befintligtSaldo
        print(f"Uttag gjort!") 
        cprint(f"Ditt nuvarande saldo är: {befintligtSaldo}", "grey", "on_white")
        print("")


         app.login_manager.init_app(app)


         #-----------------------------------------------------------------------------------------------

def create_transfer(accountA, accountB, transactionA, transactionB):
    accountA.Balance = accountA.Balance - transactionA.Amount
    accountB.Balance = accountB.Balance + transactionB.Amount

    transactionA.NewBalance = accountA.Balance
    transactionA.AccountId = accountA.Id
    transactionA.Date = today
    transactionA.Type = "Credit"
    transactionA.Operation = "Transfer"

    transactionB.NewBalance = accountB.Balance
    transactionB.AccountId = accountB.Id
    transactionB.Date = today
    transactionB.Type = "Depit"
    transactionB.Operation = "Transfer"

    accountA.Transactions.append(transactionA)
    accountB.Transactions.append(transactionB)


@app.route("/customer/account/transfer/<id>", methods=['GET', 'POST'])
def transfer(id):
    account = Account.query.filter_by(Id = id).first()
    customer = account.Customer
    form = TransferForm()
    if form.validate_on_submit():
        transaction_receiver = Transaction()
        transaction_sender = Transaction()
        ReceiverAccount = Account.query.filter_by(Id = form.Receiver.data).first()
        transaction_receiver.Amount= form.Amount.data
        transaction_sender.Amount = form.Amount.data

        create_transfer(account, ReceiverAccount, transaction_receiver, transaction_sender)
        db.session.add(account)
        db.session.add(ReceiverAccount)
        db.session.add(transaction_receiver)
        db.session.add(transaction_sender)
        db.session.commit()

    return render_template("transfer.html", account = account, customer = customer, form = form)

#----------------------------------------------------------------------------------------------------------